// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("rescript/lib/js/caml_option.js");

function make(initialValue) {
  var tokensDict = Object.fromEntries([]);
  return [
          tokensDict,
          initialValue
        ];
}

async function decrement(param, identifier) {
  var tokensDict = param[0];
  var tokens = tokensDict[identifier];
  if (tokens !== undefined && tokens !== 0) {
    tokensDict[identifier] = tokens - 1 | 0;
    return ;
  }
  
}

async function increment(param, identifier) {
  var tokensDict = param[0];
  var tokens = tokensDict[identifier];
  if (tokens !== undefined) {
    tokensDict[identifier] = tokens + 1 | 0;
  } else {
    tokensDict[identifier] = param[1];
  }
}

async function get(param, identifier) {
  var initialValue = param[1];
  var tokensDict = param[0];
  var tokens = tokensDict[identifier];
  if (tokens !== undefined) {
    return Caml_option.valFromOption(tokens);
  } else {
    tokensDict[identifier] = initialValue;
    return initialValue;
  }
}

var InMemoryStore = {
  make: make,
  decrement: decrement,
  increment: increment,
  get: get
};

exports.InMemoryStore = InMemoryStore;
/* No side effect */
