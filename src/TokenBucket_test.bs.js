// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/rescript-jest/src/jest.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Store = require("./Store.bs.js");
var Utils = require("./Utils.bs.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Core__Array = require("@rescript/core/src/Core__Array.bs.js");
var TokenBucket = require("./TokenBucket.bs.js");
var Core__Option = require("@rescript/core/src/Core__Option.bs.js");

function inSeries(ops) {
  return Core__Array.reduce(ops, Promise.resolve([]), (function (chain, asyncOp) {
                return chain.then(function (previousResults) {
                            return Curry._1(asyncOp, undefined).then(function (currentResult) {
                                        return Promise.resolve(previousResults.concat([currentResult]));
                                      });
                          });
              }));
}

function unpackOptionalDependency(value, fn) {
  if (value !== undefined) {
    return Curry._1(fn, Caml_option.valFromOption(value));
  }
  throw Js_exn.raiseError("Should never happen");
}

Jest.describe("Token Bucket Algorithm", (function (param) {
        Jest.describe("When a request arrives and the bucket contains tokens, the request is handled and a token is removed from the bucket", (function (param) {
                Jest.testPromise("Handles request from single IP", undefined, (function (param) {
                        var store = Store.InMemoryStore.make(undefined);
                        var request = "ip.1";
                        var getTime = function (param) {
                          return 1000.0;
                        };
                        var capacity = Utils.NaturalNumber.make(1);
                        return unpackOptionalDependency(capacity, (function (capacity) {
                                      var handleRequest = function (param) {
                                        return TokenBucket.makeBucket(store, getTime, capacity, param);
                                      };
                                      return inSeries([
                                                    (function (param) {
                                                        return handleRequest(request);
                                                      }),
                                                    (function (param) {
                                                        return handleRequest(request);
                                                      })
                                                  ]).then(function (handleResults) {
                                                  return Jest.Expect.toEqual(Jest.Expect.expect(handleResults), [
                                                              {
                                                                TAG: /* Ok */0,
                                                                _0: undefined
                                                              },
                                                              {
                                                                TAG: /* Error */1,
                                                                _0: undefined
                                                              }
                                                            ]);
                                                });
                                    }));
                      }));
                Jest.testPromise("Handles requests from different IPs, decrementing each of their token buckets", undefined, (function (param) {
                        var store = Store.InMemoryStore.make(undefined);
                        var requestIP1 = "ip.1";
                        var getTime = function (param) {
                          return 1000.0;
                        };
                        var capacity = Utils.NaturalNumber.make(1);
                        return unpackOptionalDependency(capacity, (function (capacity) {
                                      var handleRequest = function (param) {
                                        return TokenBucket.makeBucket(store, getTime, capacity, param);
                                      };
                                      return inSeries([
                                                    (function (param) {
                                                        return handleRequest(requestIP1);
                                                      }),
                                                    (function (param) {
                                                        return handleRequest("ip.2");
                                                      }),
                                                    (function (param) {
                                                        return handleRequest(requestIP1);
                                                      })
                                                  ]).then(function (handleResults) {
                                                  return Jest.Expect.toEqual(Jest.Expect.expect(handleResults), [
                                                              {
                                                                TAG: /* Ok */0,
                                                                _0: undefined
                                                              },
                                                              {
                                                                TAG: /* Ok */0,
                                                                _0: undefined
                                                              },
                                                              {
                                                                TAG: /* Error */1,
                                                                _0: undefined
                                                              }
                                                            ]);
                                                });
                                    }));
                      }));
              }));
        Jest.testPromise("Refils 1 token per second", undefined, (function (param) {
                var store = Store.InMemoryStore.make(undefined);
                var request = "some.ip";
                var mockFn = jest.fn();
                mockFn.mockReturnValueOnce(1000.0);
                mockFn.mockReturnValueOnce(1200.0);
                mockFn.mockReturnValueOnce(2000.0);
                var getTime = function (param) {
                  return Core__Option.getOr(Caml_option.undefined_to_opt(mockFn(undefined)), 0.0);
                };
                var capacity = Utils.NaturalNumber.make(1);
                return unpackOptionalDependency(capacity, (function (capacity) {
                              var handleRequest = function (param) {
                                return TokenBucket.makeBucket(store, getTime, capacity, param);
                              };
                              return inSeries([
                                            (function (param) {
                                                return handleRequest(request);
                                              }),
                                            (function (param) {
                                                return handleRequest(request);
                                              }),
                                            (function (param) {
                                                return handleRequest(request);
                                              })
                                          ]).then(function (results) {
                                          return Jest.Expect.toEqual(Jest.Expect.expect(results), [
                                                      {
                                                        TAG: /* Ok */0,
                                                        _0: undefined
                                                      },
                                                      {
                                                        TAG: /* Error */1,
                                                        _0: undefined
                                                      },
                                                      {
                                                        TAG: /* Ok */0,
                                                        _0: undefined
                                                      }
                                                    ]);
                                        });
                            }));
              }));
      }));

var NaturalNumber;

exports.NaturalNumber = NaturalNumber;
exports.inSeries = inSeries;
exports.unpackOptionalDependency = unpackOptionalDependency;
/*  Not a pure module */
