// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/rescript-jest/src/jest.bs.js");
var Curry = require("rescript/lib/js/curry.js");

function makeBucket(store, _request) {
  return Curry._1(store.get, undefined).then(function (tokens) {
              if (tokens !== 0) {
                return {
                        TAG: /* Ok */0,
                        _0: undefined
                      };
              } else {
                return {
                        TAG: /* Error */1,
                        _0: undefined
                      };
              }
            });
}

Jest.describe("Token Bucket Algorithm", (function (param) {
        Jest.testPromise("When a request arrives and the bucket contains tokens, the request is handled and a token is removed from the bucket", undefined, (function (param) {
                var store_decrement = function (param) {
                  return Promise.resolve(undefined);
                };
                var store_increment = function (param) {
                  return Promise.resolve(undefined);
                };
                var store_get = function (param) {
                  return Promise.resolve(1);
                };
                var store = {
                  decrement: store_decrement,
                  increment: store_increment,
                  get: store_get
                };
                return makeBucket(store, "ip.1").then(function (handleResult) {
                            return Jest.Expect.toEqual(Jest.Expect.expect(handleResult), {
                                        TAG: /* Ok */0,
                                        _0: undefined
                                      });
                          });
              }));
        Jest.testPromise("When a request arrives and the bucket is empty, the request is declined", undefined, (function (param) {
                var store_decrement = async function (param) {
                  
                };
                var store_increment = async function (param) {
                  
                };
                var store_get = async function (param) {
                  return 0;
                };
                var store = {
                  decrement: store_decrement,
                  increment: store_increment,
                  get: store_get
                };
                return makeBucket(store, "some.ip").then(function (handleResult) {
                            return Jest.Expect.toEqual(Jest.Expect.expect(handleResult), {
                                        TAG: /* Error */1,
                                        _0: undefined
                                      });
                          });
              }));
      }));

exports.makeBucket = makeBucket;
/*  Not a pure module */
